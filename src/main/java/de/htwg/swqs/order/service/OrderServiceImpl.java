package de.htwg.swqs.order.service;

import de.htwg.swqs.order.model.Cost;
import de.htwg.swqs.order.model.CustomerInfo;
import de.htwg.swqs.order.model.Order;
import de.htwg.swqs.order.model.ShoppingCart;
import de.htwg.swqs.order.repository.OrderRepository;
import de.htwg.swqs.order.shippingcost.ShippingCostService;
import de.htwg.swqs.order.util.OrderNotFoundException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.time.LocalDate;
import java.util.Currency;
import java.util.Optional;

@Service
public class OrderServiceImpl implements OrderService {

    private ShippingCostService shippingCostService;
    private OrderRepository orderRepository;

    @Autowired
    public OrderServiceImpl(ShippingCostService shippingCostService, OrderRepository orderRepository) {
        this.shippingCostService = shippingCostService;
        this.orderRepository = orderRepository;
    }

    /**
     * Creates a new order from the customer info and the corresponding shopping cart
     *
     * @param customerInfo The info about customer name and address
     * @param shoppingCart The shopping cart with the ShoppingCartItems
     * @return The created order Object
     */
    public Order createOrder(CustomerInfo customerInfo, ShoppingCart shoppingCart) {
        Order newOrder = new Order();
        newOrder.setCustomerInfo(customerInfo);
        newOrder.setShoppingCart(shoppingCart);
        newOrder.setOrderDate(LocalDate.now());
        Cost shippingCosts = this.shippingCostService.calculateShippingCosts(customerInfo, shoppingCart);
        newOrder.setCostShipping(shippingCosts);
        newOrder.setCostTotal(new Cost(shoppingCart.getCartTotalSum().add(shippingCosts.getAmount()), Currency.getInstance("EUR")));
        return newOrder;
    }

    /**
     * Persists the order object and returns the persisted order object (with autogenerated id)
     *
     * @param order The order object to persist
     * @return The persisted order object
     */
    public Order persistOrder(Order order) {
        return this.orderRepository.saveAndFlush(order);
    }

    public Order getOrderById(long id) {
        Optional<Order> orderOptional = this.orderRepository.findById(id);
        if (!orderOptional.isPresent()) {
            throw new OrderNotFoundException("Order with id " + id + " does not exist");
        }
        return orderOptional.get();
    }
}
